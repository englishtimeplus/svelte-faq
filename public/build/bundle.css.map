{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../FAQ.svelte",
    "../../FAQItem.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import FAQ from \"./FAQ.svelte\"\n\n  export let name;\n\n  let url1 = 'https://raw.githubusercontent.com/ksuess/svelte-faq/master/faqitems.json';\n  let url2 = url1;\n</script>\n\n\n<main>\n  <div class=\"debug\">\n    <h2>DEBUG</h2>\n    <ul>\n      <li>\n        <button on:click={() => {\n            console.log(\"piep\");\n          }}>show</button>\n      </li>\n    </ul>\n  </div>\n\n  <h1>FAQ for \"{name}\"</h1>\n  <FAQ apiURL={url1}/>\n\n  <h1>FAQ for \"Frameworks\"</h1>\n  <FAQ apiURL={url2}/>\n</main>\n\n\n<style type=\"less\">main {\n  /* text-align: center; */\n  padding: 1em;\n  max-width: 1000px;\n  margin: 0 auto;\n}\nh1 {\n  color: #ff3e00;\n  text-transform: uppercase;\n  font-size: 4em;\n  font-weight: 100;\n}\n/* @media (min-width: 640px) {\n  main {\n    max-width: none;\n  }\n} */\n</style>\n",
    "<script>\n  import {onMount} from 'svelte';\n  import {createFAQItems} from './stores.js'\n  import FAQItem from './FAQItem.svelte'\n  import { text_area_resize } from './autoresize_textarea.js'\n\n  export let apiURL = undefined;\n  let faqitems = undefined; // store: variable, not const, because we create / initialize it onMount\n\n  let question = '';\n  let answer = '';\n\n  const faqitems_plone = [\n      {\n          question: 'What does the Plone Foundation do?',\n          answer: `The mission of the Plone Foundation is to protect and promote Plone.\n              The Foundation provides marketing assistance, awareness, and\n              evangelism assistance to the Plone community. The Foundation also\n              assists with development funding and coordination of funding for\n              large feature implementations. In this way, our role is similar to\n              the role of the Apache Software Foundation and its relationship with\n              the Apache Project.`\n      },\n      {\n          question: 'Who can join the Plone Foundation?',\n          answer: `Everyone contributing to Plone Software, Plone documentation, organizing events or doing something good for PF.`\n      },\n      {\n          question: 'When is the next conference?',\n          answer: `November in Belgium`\n      }\n  ]\n\n  function createFAQItem(event) {\n    // reactivity! updating the store cause the view to update with the new FAQItem\n    faqitems.create({question: question, answer: answer});\n    question = '';\n    answer = '';\n  }\n\n  let promise = getFAQItems();\n  async function getFAQItems() {\n    const response = await fetch(apiURL);\n    const data = await response.json();\n    // creating store\n    faqitems = await createFAQItems(data);\n    if (response.ok) {\n      return faqitems;\n    } else {\n      throw new Error(data);\n    }\n  };\n\n  onMount(() => {\n    promise = getFAQItems();\n  })\n</script>\n\n\n<div class=\"debug\">\n  <h2>DEBUG</h2>\n  <ul>\n    <li>\n      <button on:click={() => {\n        console.log(faqitems);\n        console.log($faqitems)\n      }}>log store of FAQs</button>\n    </li>\n  </ul>\n</div>\n\n\n{#await promise}\n  <p>...waiting</p>\n{:then}\n  <ul>\n    {#each $faqitems as faqitem, i} <!-- $faqitems: value (list of FAQ items) stored in store faqitems -->\n      <FAQItem faqitem={faqitem}\n        index={i}\n        faqitems={faqitems}/>\n    {/each}\n  </ul>\n{:catch error}\n  <p style=\"color: red\">{error.message} url: {apiURL}</p>\n\n  <h3>Default Content on network error:</h3>\n  <ul style=\"color: orange\">\n    {#each faqitems_plone as faqitem, i} <!-- $faqitems: value (list of FAQ items) stored in store faqitems -->\n      <FAQItem faqitem={faqitem}\n        index={i}\n        faqitems={faqitems}/>\n    {/each}\n  </ul>\n{/await}\n\n<div class=\"createFAQItem\">\n  <label>\n    Question:\n    <input type=\"text\" bind:value={question}/>\n  </label>\n  <label>\n    Answer:\n    <textarea bind:value={answer} use:text_area_resize/>\n  </label>\n  <button on:click={createFAQItem}>add</button>\n</div>\n\n<style type=\"less\">ul {\n  padding-left: 0;\n}\ndiv.createFAQItem {\n  background-color: #e9f0f6;\n  padding: 0.7rem 0.4rem;\n}\n</style>\n",
    "<script>\n  import { fade } from 'svelte/transition';\n  import { slide } from 'svelte/transition';\n  import { text_area_resize } from './autoresize_textarea.js'\n\n  export let faqitem = undefined;\n  export let index = undefined;\n  export let faqitems = undefined; // store must be provided by parent\n\n  let answervisible = false;\n  let editmode = false;\n\n  function toggleAnswer(event) {\n    answervisible = !answervisible;\n  }\n\n  function saveFAQItem(event) {\n    // in fact no need to save, store is updated while typing.\n    // why isn't it necessary to update the store explicitly with the new faqitem?\n    // if it's really not necessary, the index is superfluous (no, see delete and add new item)\n    // $faqitems[index] = faqitem; // not necessary, store is updated while typing!\n    editmode = false;\n    answervisible = true;\n  }\n\n  function deleteFAQItem(event) {\n    faqitems.delete(index);\n  }\n\n  // use:action directive example\n  function foo(node, editmode) {\n    // the node has been mounted in the DOM\n\n    return {\n      update(editmode) {\n        // the value of `editmode` prop has changed\n        console.log(`do something on update (of editmode) of faqitem ${faqitem.question}`);\n      },\n\n      destroy() {\n        // the node has been removed from the DOM\n        // FAQItem is unmounted. So no more access to faqitem prop!\n        // Unfortunatly this does not return undefined but prop of another FAQItem instance.\n        console.log(node, `faqitem ${faqitem.question} has been removed.`);\n      }\n    };\n  }\n</script>\n\n\n<li use:foo={editmode}>\n  {#if !editmode}\n    <div class=\"display\">\n      <h2 on:click={toggleAnswer}>{faqitem.question}</h2>\n      <!-- conditional CSS class -->\n      <!-- <h3 class:hidden={!answervisible}>hope we can help with following answer. Mail us, we like to improve the help section. (TOTAKE: <i>conditional class</i>)</h3> -->\n      {#if answervisible}\n        <p transition:slide|local=\"{{duration:1000}}\">\n          {faqitem.answer}\n        </p>\n      {/if}\n    </div>\n  {:else} <!-- editmode -->\n    <div class=\"edit\" transition:fade>\n      <label>\n        Question:\n        <input type=\"text\" bind:value={faqitem.question}/>\n      </label>\n      <label>\n        Answer:\n        <textarea bind:value={faqitem.answer} use:text_area_resize/>\n      </label>\n      <button on:click={saveFAQItem}>save</button>\n    </div>\n  {/if}\n  <div class=\"control\">\n    <button class=\"destructive\"\n      on:click={deleteFAQItem}>delete</button>\n    <button on:click={() => editmode=!editmode}>edit</button>\n  </div>\n</li>\n\n\n<style type=\"less\">li {\n  list-style-type: none;\n  display: flex;\n}\nli h2 {\n  text-decoration: underline;\n  cursor: pointer;\n}\n.control {\n  align-self: flex-end;\n  margin-left: 1em;\n  display: flex;\n  flex-direction: row;\n  /* justify-content: flex-end; */\n}\n.control button {\n  margin-right: 0.3rem;\n}\n.hidden {\n  display: none;\n}\n</style>\n"
  ],
  "names": [],
  "mappings": "AA8BmB,IAAI,cAAC,CAAC,AAEvB,OAAO,CAAE,GAAG,CACZ,SAAS,CAAE,MAAM,CACjB,MAAM,CAAE,CAAC,CAAC,IAAI,AAChB,CAAC,AACD,EAAE,cAAC,CAAC,AACF,KAAK,CAAE,OAAO,CACd,cAAc,CAAE,SAAS,CACzB,SAAS,CAAE,GAAG,CACd,WAAW,CAAE,GAAG,AAClB,CAAC;ACkEkB,EAAE,eAAC,CAAC,AACrB,YAAY,CAAE,CAAC,AACjB,CAAC,AACD,GAAG,cAAc,eAAC,CAAC,AACjB,gBAAgB,CAAE,OAAO,CACzB,OAAO,CAAE,MAAM,CAAC,MAAM,AACxB,CAAC;AC9BkB,EAAE,4BAAC,CAAC,AACrB,eAAe,CAAE,IAAI,CACrB,OAAO,CAAE,IAAI,AACf,CAAC,AACD,gBAAE,CAAC,EAAE,cAAC,CAAC,AACL,eAAe,CAAE,SAAS,CAC1B,MAAM,CAAE,OAAO,AACjB,CAAC,AACD,QAAQ,4BAAC,CAAC,AACR,UAAU,CAAE,QAAQ,CACpB,WAAW,CAAE,GAAG,CAChB,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,AAErB,CAAC,AACD,sBAAQ,CAAC,MAAM,cAAC,CAAC,AACf,YAAY,CAAE,MAAM,AACtB,CAAC"
}