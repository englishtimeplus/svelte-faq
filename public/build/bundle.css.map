{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../FAQ.svelte",
    "../../FAQItem.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import FAQ from \"./FAQ.svelte\"\n  // import {faqitemsstore1} from './stores.js'\n  // import {faqitemsstore2} from './stores.js'\n  import {createFAQItems} from './stores.js'\n\n  export let name;\n\n\n  // stores for multiple FAQs\n  const faqitems_plone = [\n      {\n          question: 'What does the Plone Foundation do?',\n          answer: `The mission of the Plone Foundation is to protect and promote Plone.\n              The Foundation provides marketing assistance, awareness, and\n              evangelism assistance to the Plone community. The Foundation also\n              assists with development funding and coordination of funding for\n              large feature implementations. In this way, our role is similar to\n              the role of the Apache Software Foundation and its relationship with\n              the Apache Project.`\n      },\n      {\n          question: 'Who can join the Plone Foundation?',\n          answer: `Everyone contributing to Plone Software, Plone documentation, organizing events or doing something good for PF.`\n      },\n      {\n          question: 'When is the next conference?',\n          answer: `November in Belgium`\n      }\n  ]\n\n  const faqitems_frameworks = [\n      {\n          question: 'Why do I need a framework?',\n          answer: 'It saves time. You can skip to important tasks.'\n      }\n  ]\n  const faqstore1 = createFAQItems(faqitems_plone);\n  const faqstore2 = createFAQItems(faqitems_frameworks);\n</script>\n\n\n<main>\n  <div class=\"debug\">\n    <h2>DEBUG</h2>\n    <ul>\n      <li>\n        <button on:click={() => {\n          console.log(faqstore1);\n          console.log($faqstore1)\n        }}>FAQ \"{name}\": log store of FAQs 1</button>\n      </li>\n      <li>\n        <button on:click={() => {\n          console.log(faqstore2);\n          console.log($faqstore2)\n        }}>FAQ \"Frameworks\" log store of FAQs 2</button>\n      </li>\n      <!-- <li>\n        <button on:click={() => {\n            console.log(\"piep\")\n          }}>show</button>\n      </li> -->\n    </ul>\n\n  </div>\n\n  <h1>FAQ for \"{name}\"</h1>\n  <FAQ faqitems={faqstore1}/>\n\n  <h1>FAQ for \"Frameworks\"</h1>\n  <FAQ faqitems={faqstore2}/>\n</main>\n\n\n<style type=\"less\">main {\n  /* text-align: center; */\n  padding: 1em;\n  max-width: 240px;\n  margin: 0 auto;\n}\nh1 {\n  color: #ff3e00;\n  text-transform: uppercase;\n  font-size: 4em;\n  font-weight: 100;\n}\n.debug {\n  /* display: none; */\n  background-color: #b7e7cc;\n  padding: 1rem;\n}\n.debug li {\n  list-style-type: none;\n}\n@media (min-width: 640px) {\n  main {\n    max-width: none;\n  }\n}\n</style>\n",
    "<!--\nTODO use external data\n -->\n\n<script>\n  import FAQItem from './FAQItem.svelte'\n\n  export let faqitems = undefined; // store must be provided by parent\n  let question = '';\n  let answer = '';\n\n  function createFAQItem(event) {\n    // reactivity! updating the store cause the view to update with the new FAQItem\n    faqitems.create({question: question, answer: answer});\n    question = '';\n    answer = '';\n  }\n</script>\n\n\n<ul>\n  {#each $faqitems as faqitem, i} <!-- $faqitems: value (list of FAQ items) stored in store -->\n    <FAQItem faqitem={faqitem}\n      index={i}\n      faqitems={faqitems}/>\n  {/each}\n</ul>\n\n<div>\n  <label>\n    Question:\n    <input type=\"text\" bind:value={question}>\n  </label>\n  <label>\n    Answer:\n    <input type=\"text\" bind:value={answer}>\n  </label>\n  <button on:click={createFAQItem}>add</button>\n</div>\n\n<style type=\"less\">ul {\n  padding-left: 0;\n}\ndiv {\n  background-color: #e9f0f6;\n  padding: 0.7rem 0.4rem;\n}\n</style>\n",
    "<script>\n  import { fade } from 'svelte/transition';\n  import { slide } from 'svelte/transition';\n\n  export let faqitem = undefined;\n  export let index = undefined;\n  export let faqitems = undefined; // store must be provided by parent\n\n  let answervisible = false;\n  let editmode = false;\n\n  function toggleAnswer(event) {\n    answervisible = !answervisible;\n  }\n\n  function saveFAQItem(event) {\n    // console.log(\"faqitem to save\", faqitem);\n    // why isn't it necessary to update the store explicitly with the new faqitem?\n    // if it's really not necessary, the index is superfluous (no, see delete and add new item)\n    // $faqitems[index] = faqitem;\n    editmode = false;\n    answervisible = true;\n    // console.log(\"faqitem saved to \", $faqitems);\n    // console.log(\"index\", index);\n  }\n\n  function deleteFAQItem(event) {\n    faqitems.delete(index);\n  }\n\n  // use:action directive example\n  function foo(node, editmode) {\n    // the node has been mounted in the DOM\n\n    return {\n      update(editmode) {\n        // the value of `editmode` prop has changed\n        console.log(`do something on update (of editmode) of faqitem ${faqitem.question}`);\n      },\n\n      destroy() {\n        // the node has been removed from the DOM\n        // FAQItem is unmounted. So no more access to faqitem prop!\n        // Unfortunatly this does not return undefined but prop of another FAQItem instance.\n        console.log(node, `faqitem ${faqitem.question} has been removed.`);\n      }\n    };\n  }\n</script>\n\n\n<li use:foo={editmode}>\n  <div class=\"control\">\n    <button class=\"destructive\"\n      on:click={deleteFAQItem}>delete</button>\n    <button on:click={() => editmode=!editmode}>edit</button>\n  </div>\n  {#if !editmode}\n    <h2 on:click={toggleAnswer}>{faqitem.question}</h2>\n    <!-- conditional CSS class -->\n    <h3 class:hidden={!answervisible}>hope we can help with following answer. Mail us, we like to improve the help section. (TOTAKE: <i>conditional class</i>)</h3>\n    {#if answervisible}\n      <p transition:slide|local=\"{{duration:1000}}\">\n        {faqitem.answer}\n      </p>\n    {/if}\n  {:else}\n    <div transition:fade>\n      <label>\n        Question:\n        <input type=\"text\" bind:value={faqitem.question}>\n      </label>\n      <label>\n        Answer:\n        <input type=\"text\" bind:value={faqitem.answer}>\n      </label>\n      <button on:click={saveFAQItem}>save (in fact no need to save, store is updated while typing)</button>\n    </div>\n  {/if}\n</li>\n\n\n<style type=\"less\">li {\n  list-style-type: none;\n  position: relative;\n}\nli h2 {\n  text-decoration: underline;\n  cursor: pointer;\n}\n.control {\n  display: flex;\n  flex-direction: row;\n  /* justify-content: flex-end; */\n  position: absolute;\n  right: 0;\n}\n.control button {\n  margin-right: 0.3rem;\n}\n.hidden {\n  display: none;\n}\n</style>\n"
  ],
  "names": [],
  "mappings": "AA2EmB,IAAI,8BAAC,CAAC,AAEvB,OAAO,CAAE,GAAG,CACZ,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,CAAC,CAAC,IAAI,AAChB,CAAC,AACD,EAAE,8BAAC,CAAC,AACF,KAAK,CAAE,OAAO,CACd,cAAc,CAAE,SAAS,CACzB,SAAS,CAAE,GAAG,CACd,WAAW,CAAE,GAAG,AAClB,CAAC,AACD,MAAM,8BAAC,CAAC,AAEN,gBAAgB,CAAE,OAAO,CACzB,OAAO,CAAE,IAAI,AACf,CAAC,AACD,qBAAM,CAAC,EAAE,eAAC,CAAC,AACT,eAAe,CAAE,IAAI,AACvB,CAAC,AACD,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AACzB,IAAI,8BAAC,CAAC,AACJ,SAAS,CAAE,IAAI,AACjB,CAAC,AACH,CAAC;AC3DkB,EAAE,cAAC,CAAC,AACrB,YAAY,CAAE,CAAC,AACjB,CAAC,AACD,GAAG,cAAC,CAAC,AACH,gBAAgB,CAAE,OAAO,CACzB,OAAO,CAAE,MAAM,CAAC,MAAM,AACxB,CAAC;ACoCkB,EAAE,8BAAC,CAAC,AACrB,eAAe,CAAE,IAAI,CACrB,QAAQ,CAAE,QAAQ,AACpB,CAAC,AACD,iBAAE,CAAC,EAAE,eAAC,CAAC,AACL,eAAe,CAAE,SAAS,CAC1B,MAAM,CAAE,OAAO,AACjB,CAAC,AACD,QAAQ,8BAAC,CAAC,AACR,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CAEnB,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,CAAC,AACV,CAAC,AACD,uBAAQ,CAAC,MAAM,eAAC,CAAC,AACf,YAAY,CAAE,MAAM,AACtB,CAAC,AACD,OAAO,8BAAC,CAAC,AACP,OAAO,CAAE,IAAI,AACf,CAAC"
}