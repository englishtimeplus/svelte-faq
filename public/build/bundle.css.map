{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../FAQ.svelte",
    "../../FAQItem.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import FAQ from \"./FAQ.svelte\"\n  import {faqitemsstore1} from './stores.js'\n  import {faqitemsstore2} from './stores.js'\n\n  export let name;\n</script>\n\n\n<main>\n  <div class=\"debug\">\n    <h2>DEBUG</h2>\n    <ul>\n      <li>\n        <button on:click={() => {\n          console.log(faqitemsstore1);\n          console.log($faqitemsstore1)\n        }}>FAQ \"{name}\": log store faqitemsstore1</button>\n      </li>\n      <li>\n        <button on:click={() => {\n          console.log(faqitemsstore2);\n          console.log($faqitemsstore2)\n        }}>FAQ \"Frameworks\" log store faqitemsstore2</button>\n      </li>\n    </ul>\n\n  </div>\n\n  <h1>FAQ for \"{name}\"</h1>\n  <FAQ faqitems={faqitemsstore1}/>\n\n  <h1>FAQ for \"Frameworks\"</h1>\n  <FAQ faqitems={faqitemsstore2}/>\n</main>\n\n\n<style type=\"less\">main {\n  /* text-align: center; */\n  padding: 1em;\n  max-width: 240px;\n  margin: 0 auto;\n}\nh1 {\n  color: #ff3e00;\n  text-transform: uppercase;\n  font-size: 4em;\n  font-weight: 100;\n}\n.debug {\n  display: none;\n  background-color: #b7e7cc;\n  padding: 1rem;\n}\n.debug li {\n  list-style-type: none;\n}\n@media (min-width: 640px) {\n  main {\n    max-width: none;\n  }\n}\n</style>\n",
    "<!--\nTODO use external data\n -->\n\n<script>\n  import FAQItem from './FAQItem.svelte'\n\n  export let faqitems = undefined; // store must be provided by parent\n  let question = '';\n  let answer = '';\n\n  function createFAQItem(event) {\n    // reactivity! updating the store cause the view to update with the new FAQItem\n    faqitems.create({question: question, answer: answer});\n    question = '';\n    answer = '';\n  }\n</script>\n\n\n<ul>\n  {#each $faqitems as faqitem, i} <!-- $faqitems: value (list of FAQ items) stored in store -->\n    <FAQItem faqitem={faqitem}\n      index={i}\n      faqitems={faqitems}/>\n  {/each}\n</ul>\n\n<div>\n  <label>\n    Question:\n    <input type=\"text\" bind:value={question}>\n  </label>\n  <label>\n    Answer:\n    <input type=\"text\" bind:value={answer}>\n  </label>\n  <button on:click={createFAQItem}>add</button>\n</div>\n\n<style type=\"less\">ul {\n  padding-left: 0;\n}\ndiv {\n  background-color: #e9f0f6;\n  padding: 0.7rem 0.4rem;\n}\n</style>\n",
    "<script>\n  import { fade } from 'svelte/transition';\n  import { slide } from 'svelte/transition';\n\n  export let faqitem = undefined;\n  export let index = undefined;\n  export let faqitems = undefined; // store must be provided by parent\n\n  let answervisible = false;\n  let editmode = false;\n\n  function toggleAnswer(event) {\n    answervisible = !answervisible;\n  }\n\n  function saveFAQItem(event) {\n    // console.log(\"faqitem to save\", faqitem);\n    // TODO save handler\n    // why isn't it necessary to update the store explicitly with the new faqitem?\n    // if it's really not necessary, the index is superfluous (no, see delete and add new item)\n    // $faqitems[index] = faqitem;\n    editmode = false;\n    answervisible = true;\n    // console.log(\"faqitem saved to \", $faqitems);\n    // console.log(\"index\", index);\n  }\n\n  function deleteFAQItem(event) {\n    faqitems.delete(index);\n  }\n</script>\n\n\n<li>\n  <div class=\"control\">\n    <button class=\"destructive\"\n      on:click={deleteFAQItem}>delete</button>\n    <button on:click={() => editmode=!editmode}>edit</button>\n  </div>\n  {#if !editmode}\n    <h2 on:click={toggleAnswer}>{faqitem.question}</h2>\n    {#if answervisible}\n      <p transition:slide|local=\"{{duration:1000}}\">\n        {faqitem.answer}\n      </p>\n    {/if}\n  {:else}\n    <div transition:fade>\n      <label>\n        Question:\n        <input type=\"text\" bind:value={faqitem.question}>\n      </label>\n      <label>\n        Answer:\n        <input type=\"text\" bind:value={faqitem.answer}>\n      </label>\n      <button on:click={saveFAQItem}>save (in fact no need to save, store is updated while typing)</button>\n    </div>\n  {/if}\n</li>\n\n\n<style type=\"less\">li {\n  list-style-type: none;\n  position: relative;\n}\nli h2 {\n  text-decoration: underline;\n  cursor: pointer;\n}\n.control {\n  display: flex;\n  flex-direction: row;\n  /* justify-content: flex-end; */\n  position: absolute;\n  right: 0;\n}\n.control button {\n  margin-right: 0.3rem;\n}\n</style>\n"
  ],
  "names": [],
  "mappings": "AAqCmB,IAAI,8BAAC,CAAC,AAEvB,OAAO,CAAE,GAAG,CACZ,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,CAAC,CAAC,IAAI,AAChB,CAAC,AACD,EAAE,8BAAC,CAAC,AACF,KAAK,CAAE,OAAO,CACd,cAAc,CAAE,SAAS,CACzB,SAAS,CAAE,GAAG,CACd,WAAW,CAAE,GAAG,AAClB,CAAC,AACD,MAAM,8BAAC,CAAC,AACN,OAAO,CAAE,IAAI,CACb,gBAAgB,CAAE,OAAO,CACzB,OAAO,CAAE,IAAI,AACf,CAAC,AACD,qBAAM,CAAC,EAAE,eAAC,CAAC,AACT,eAAe,CAAE,IAAI,AACvB,CAAC,AACD,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AACzB,IAAI,8BAAC,CAAC,AACJ,SAAS,CAAE,IAAI,AACjB,CAAC,AACH,CAAC;ACrBkB,EAAE,cAAC,CAAC,AACrB,YAAY,CAAE,CAAC,AACjB,CAAC,AACD,GAAG,cAAC,CAAC,AACH,gBAAgB,CAAE,OAAO,CACzB,OAAO,CAAE,MAAM,CAAC,MAAM,AACxB,CAAC;ACgBkB,EAAE,4BAAC,CAAC,AACrB,eAAe,CAAE,IAAI,CACrB,QAAQ,CAAE,QAAQ,AACpB,CAAC,AACD,gBAAE,CAAC,EAAE,cAAC,CAAC,AACL,eAAe,CAAE,SAAS,CAC1B,MAAM,CAAE,OAAO,AACjB,CAAC,AACD,QAAQ,4BAAC,CAAC,AACR,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CAEnB,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,CAAC,AACV,CAAC,AACD,sBAAQ,CAAC,MAAM,cAAC,CAAC,AACf,YAAY,CAAE,MAAM,AACtB,CAAC"
}